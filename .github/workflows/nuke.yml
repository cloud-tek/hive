name: "nuke"
on:
  workflow_call:
    secrets:
      NUGET_API_KEY:
        description: "NuGet API Key"
        required: false
      GH_TOKEN:
        description: "GitHub Token"
        required: false
    inputs:
      Directory:
        description: "Project directory"
        type: string
        required: true
      NetCoreVersion:
        type: string
        required: true
      GitVersion:
        description: "Flag indicating whether gitversion is to be used"
        type: boolean
        required: true
      Compile:
        description: "Flag indicating if Compile task is to be run"
        type: boolean
        default: true
        required: false
      Publish:
        description: "Flag indicating if Publish task is to be run after the Unit&Integration tests"
        type: boolean
        default: false
        required: false
      Pack:
        description: "Flag indicating if Pack task is to be run"
        type: boolean
        default: false
        required: false
      Push:
        description: "Flag indicating if Push task is to be run after the Pack task"
        type: boolean
        default: false
        required: false
      UnitTests:
        description: "Flag indicating if UnitTests task is to be run"
        type: boolean
        default: false
        required: false
      IntegrationTests:
        description: "Flag indicating if IntegrationTests task is to be run"
        type: boolean
        default: false
        required: false
      FormatCheck:
        description: "Flag indicating if FormatCheck task is to be run"
        type: boolean
        default: true
        required: false
      PackagesOutdatedCheck:
        description: "Flag indicating if PackagesOutdatedCheck task is to be run"
        type: boolean
        default: true
        required: false
      PackagesBetaCheck:
        description: "Flag indicating if PackagesBetaCheck task is to be run"
        type: boolean
        default: true
        required: false
      RunChecks:
        description: "Flag indicating if RunChecks task is to be run"
        type: boolean
        default: true
        required: false
      NuGetApiUrl:
        description: "NuGet Url"
        type: string
        required: false

jobs:
  nuke:
    name: nuke
    runs-on: ubuntu-latest
    env:
      NUKE_SKIP_UNITTESTS: ${{ !inputs.UnitTests }}
      NUKE_SKIP_INTEGRATIONTESTS: ${{ !inputs.IntegrationTests }}
      NUKE_SKIP_FORMATCHECK: ${{ !inputs.FormatCheck }}
      NUKE_SKIP_PACKAGESOUTDATEDCHECK: ${{ !inputs.PackagesOutdatedCheck }}
      NUKE_SKIP_PACKAGESBETACHECK: ${{ !inputs.PackagesBetaCheck }}
      NUKE_SKIP_RUNCHECKS: ${{ !inputs.RunChecks }}
      NUKE_SKIP_PACK: ${{ !inputs.Pack }}
      NUKE_SKIP_PUSH: ${{ !inputs.Push }}
      NUKE_SKIP_PUBLISH: ${{ !inputs.Publish }}
    steps:

      - uses: actions/checkout@v3
        with:
          fetch-depth: "0"
          token: ${{ secrets.GH_TOKEN }}

      - shell: bash
        name: git config
        if: |
          github.ref == 'refs/heads/main' &&
          github.event_name == 'pull_request' &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - uses: actions/setup-dotnet@v1
        name: dotnet installer
        with:
          dotnet-version: ${{ inputs.NetCoreVersion }}

      - name: dotnet tool restore
        shell: bash
        working-directory: ${{ inputs.Directory }}
        run: |
          dotnet nuget list source
          dotnet tool restore

      # - name: global.json
      #   shell: bash
      #   run: |
      #     if [ -f "${{ github.workspace }}/global.json" ]; then
      #       echo "global.json exists"
      #     else
      #       echo "{ \"tools\": { \"dotnet\": \"${{ inputs.NetCoreVersion }}\" } }" > ${{ github.workspace }}/global.json
      #     fi

      - name: setup gitversion
        uses: gittools/actions/gitversion/setup@v0.12.1
        with:
          versionSpec: '5.x'

      - name: run giversion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.12.1

      - uses: cloud-tek/poc-gitversion-action/smart-tag@0.2
        id: smart-tag
        with:
          semVer: ${{ steps.gitversion.outputs.semVer }}

      - name: dotnet nuke --target All
        id: nuke-all
        shell: bash
        working-directory: ${{ inputs.Directory }}
        run: |
          dotnet nuke --target All
      - name: dotnet nuke --target Push
        id: nuke-push
        if: ${{ inputs.Push }}
        shell: bash
        working-directory: ${{ inputs.Directory }}
        run: |
          dotnet nuke --target Push --nuget-api-url ${{ inputs.NuGetApiUrl }} --nuget-api-key ${{ secrets.NUGET_API_KEY }}

      - uses: cloud-tek/poc-gitversion-action/smart-tag-cleanup@0.2
        id: smart-tag-cleanup
        if: ${{ failure() && !startsWith(github.ref, 'refs/heads/main') }}
        with:
          build-status: ${{ steps.nuke-all.outputs.outcome }}
          semVer: ${{ steps.gitversion.outputs.semVer }}

      - name: tree results
        run: |
          tree ${{ github.workspace }}/results
      - name: tree artifacts
        run: |
          tree ${{ github.workspace }}/artifacts
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: ${{ inputs.UnitTests }} || ${{ inputs.IntegrationTests }} && (success() || failure())
        with:
          name: XUnit Tests
          path: ${{ github.workspace }}/results/tests/*.trx
          reporter: dotnet-trx

      # - name: gh release create
      #   shell: bash
      #   if: |
      #     ${{ inputs.GitVersion }} == true &&
      #     github.ref == 'refs/heads/main' &&
      #     github.event_name == 'pull_request' &&
      #     github.event.action == 'closed' &&
      #     github.event.pull_request.merged == true
      #   env:
      #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
      #   run: |
      #     BRANCH="${{ github.event.pull_request.head.ref }}"
      #     if [[ $BRANCH =~ (release)(\/|-)([0-9]+\.[0-9]+) ]]
      #     then
      #       echo "${{ github.event.pull_request.head.ref }} --> ${{ github.ref }} (tag: ${BASH_REMATCH[3]})"
      #       gh release create ${BASH_REMATCH[3]} --title "Release ${BASH_REMATCH[3]}" --verify-tag
      #     else
      #       echo "${{ github.event.pull_request.head.ref }} --> ${{ github.ref }} (tag: none)"


      #if [[ $TAG =~ ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-((0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))$ ]]
      # - shell: bash
      #   name: git tag -d <pre-release tag>
      #   if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/feature') }}
      #   run: |
      #     TAG=$(git describe --tags --abbrev=0)
      #     if [[ $TAG == *"-"* ]];
      #     then
      #       echo "$TAG is prelease. Deleting..."
      #       git push --delete origin $TAG
      #     else
      #       echo "$TAG is not prelease. Skipped."
      #     fi

      # - shell: bash
      #   name: git tag (on push)
      #   if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/feature') }}
      #   run: |
      #     git tag ${{ steps.gitversion.outputs.semVer }} --force
      #     git push origin ${{ steps.gitversion.outputs.semVer }} --force
      #     echo "${{ github.event.pull_request.head.ref }} --> ${{ github.ref }} (tag: ${{ steps.gitversion.outputs.semVer }})"
